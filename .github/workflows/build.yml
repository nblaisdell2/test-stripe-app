# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: React Site CI

# Needed to work with AWS Credentials & AWS CodeBuild
permissions:
  id-token: write
  contents: read

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checking out source code
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Loading Environment Variables from GH Secrets
        run: |
          touch .env

          echo "$ALLMYSECRETS" | jq -r '. | to_entries[] | select(.key | startswith("ENV")) | .key + "=" + (.value|tojson)' |
          while read i; 
          do 
            echo "${i/ENV_/""}" >> .env
          done

          cat .env
        shell: bash
        env:
          ALLMYSECRETS: ${{ toJSON(secrets) }}
      - name: Install Dependencies
        run: npm ci
      - name: Build the Application
        run: npm run build
      - name: Test the Application
        run: npm run test
      - name: Check needed values
        run: bash check_github_secrets.sh ${{ secrets.AWS_ACCOUNT_ID || 'none' }} ${{ secrets.AWS_REGION || 'none' }} ${{ secrets.AWS_CERTIFICATE_ARN || 'none' }} ${{ secrets.SITE_URL || 'none' }} ${{ secrets.SUBDOMAIN || 'none' }} ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID || 'none' }} ${{ secrets.AWS_GHACTIONS_ROLENAME || 'none' }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GHACTIONS_ROLENAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create AWS Infrastructure
        run: bash create_aws_site.sh ${{ secrets.AWS_ACCOUNT_ID }} ${{ secrets.AWS_REGION }} ${{ secrets.SITE_URL }} ${{ secrets.SUBDOMAIN }} ${{ secrets.AWS_CERTIFICATE_ARN }}
      - name: Sync Files w/ S3 Bucket
        run: aws s3 sync ./dist s3://${{ secrets.SUBDOMAIN }}.${{ secrets.SITE_URL }} --delete
      - name: Invalidate CloudFront Distribution Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
